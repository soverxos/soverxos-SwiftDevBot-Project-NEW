#!/usr/bin/env bash
# ===========================================
# SwiftDevBot - Cleanup Script
# ===========================================
# –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç –∫–µ—à–∞, –ª–æ–≥–æ–≤ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

set -e

ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$ROOT_DIR"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_header() {
    echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${BLUE}  üßπ SwiftDevBot Cleanup Utility${NC}"
    echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
}

show_usage() {
    echo "Usage: bash clean.sh [MODE]"
    echo ""
    echo "Modes:"
    echo "  cache      - –û—á–∏—Å—Ç–∏—Ç—å Python –∫–µ—à (__pycache__, *.pyc)"
    echo "  logs       - –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏ (Data/logs/*.log)"
    echo "  pids       - –û—á–∏—Å—Ç–∏—Ç—å pid —Ñ–∞–π–ª—ã (Data/pids/*.pid)"
    echo "  data       - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (logs + pids + uploads)"
    echo "  all        - –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (cache + data)"
    echo "  deep       - –ì–ª—É–±–æ–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ (all + venv rebuild)"
    echo ""
    echo "Examples:"
    echo "  bash clean.sh cache   # –¢–æ–ª—å–∫–æ –∫–µ—à Python"
    echo "  bash clean.sh all     # –ö–µ—à + –¥–∞–Ω–Ω—ã–µ"
    echo ""
}

clean_python_cache() {
    echo -e "${YELLOW}üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ Python –∫–µ—à–∞...${NC}"
    
    # –£–¥–∞–ª—è–µ–º __pycache__
    find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
    
    # –£–¥–∞–ª—è–µ–º .pyc –∏ .pyo —Ñ–∞–π–ª—ã
    find . -type f -name "*.pyc" -delete 2>/dev/null || true
    find . -type f -name "*.pyo" -delete 2>/dev/null || true
    
    # –£–¥–∞–ª—è–µ–º .pytest_cache
    find . -type d -name ".pytest_cache" -exec rm -rf {} + 2>/dev/null || true
    
    # –£–¥–∞–ª—è–µ–º .mypy_cache
    find . -type d -name ".mypy_cache" -exec rm -rf {} + 2>/dev/null || true
    
    # –£–¥–∞–ª—è–µ–º .coverage
    find . -type f -name ".coverage" -delete 2>/dev/null || true
    find . -type d -name "htmlcov" -exec rm -rf {} + 2>/dev/null || true
    
    echo -e "${GREEN}‚úÖ Python –∫–µ—à –æ—á–∏—â–µ–Ω${NC}"
}

clean_logs() {
    echo -e "${YELLOW}üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤...${NC}"
    
    if [ -d "Data/logs" ]; then
        rm -f Data/logs/*.log 2>/dev/null || true
        echo -e "${GREEN}‚úÖ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã${NC}"
    else
        echo -e "${BLUE}‚ÑπÔ∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è Data/logs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞${NC}"
    fi
}

clean_pids() {
    echo -e "${YELLOW}üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ PID —Ñ–∞–π–ª–æ–≤...${NC}"
    
    if [ -d "Data/pids" ]; then
        rm -f Data/pids/*.pid 2>/dev/null || true
        echo -e "${GREEN}‚úÖ PID —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã${NC}"
    else
        echo -e "${BLUE}‚ÑπÔ∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è Data/pids –Ω–µ –Ω–∞–π–¥–µ–Ω–∞${NC}"
    fi
}

clean_uploads() {
    echo -e "${YELLOW}üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...${NC}"
    
    if [ -d "Data/uploads" ]; then
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ .gitkeep
        find Data/uploads -type f ! -name ".gitkeep" -delete 2>/dev/null || true
        echo -e "${GREEN}‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã${NC}"
    else
        echo -e "${BLUE}‚ÑπÔ∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è Data/uploads –Ω–µ –Ω–∞–π–¥–µ–Ω–∞${NC}"
    fi
}

clean_database() {
    echo -e "${YELLOW}üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö...${NC}"
    
    if [ -d "Data/database" ]; then
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ .gitkeep
        find Data/database -type f ! -name ".gitkeep" -delete 2>/dev/null || true
        echo -e "${GREEN}‚úÖ –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω—ã${NC}"
    else
        echo -e "${BLUE}‚ÑπÔ∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è Data/database –Ω–µ –Ω–∞–π–¥–µ–Ω–∞${NC}"
    fi
}

clean_backups() {
    echo -e "${YELLOW}üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –±—ç–∫–∞–ø–æ–≤...${NC}"
    
    if [ -d "Backups" ]; then
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ .gitkeep
        find Backups -type f ! -name ".gitkeep" -delete 2>/dev/null || true
        echo -e "${GREEN}‚úÖ –ë—ç–∫–∞–ø—ã –æ—á–∏—â–µ–Ω—ã${NC}"
    else
        echo -e "${BLUE}‚ÑπÔ∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è Backups –Ω–µ –Ω–∞–π–¥–µ–Ω–∞${NC}"
    fi
}

clean_temp_files() {
    echo -e "${YELLOW}üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...${NC}"
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    find . -type f -name "*.tmp" -delete 2>/dev/null || true
    find . -type f -name "*.bak" -delete 2>/dev/null || true
    find . -type f -name "*.swp" -delete 2>/dev/null || true
    find . -type f -name "*.swo" -delete 2>/dev/null || true
    find . -type f -name "*~" -delete 2>/dev/null || true
    
    echo -e "${GREEN}‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã${NC}"
}

rebuild_venv() {
    echo -e "${YELLOW}üîÑ –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...${NC}"
    
    if [ -d ".venv" ]; then
        echo -e "${RED}‚ö†Ô∏è  –£–¥–∞–ª–µ–Ω–∏–µ .venv${NC}"
        rm -rf .venv
    fi
    
    echo -e "${BLUE}üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...${NC}"
    python3 -m venv .venv
    
    echo -e "${BLUE}üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${NC}"
    .venv/bin/pip install --upgrade pip > /dev/null 2>&1
    .venv/bin/pip install -r requirements.txt
    
    echo -e "${GREEN}‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–æ${NC}"
}

show_stats() {
    echo ""
    echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${BLUE}üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:${NC}"
    echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    
    # –†–∞–∑–º–µ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    total_size=$(du -sh . 2>/dev/null | cut -f1)
    echo -e "  –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${GREEN}${total_size}${NC}"
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Python —Ñ–∞–π–ª–æ–≤
    py_count=$(find . -name "*.py" -not -path "./.venv/*" 2>/dev/null | wc -l)
    echo -e "  Python —Ñ–∞–π–ª–æ–≤: ${GREEN}${py_count}${NC}"
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ __pycache__
    cache_count=$(find . -type d -name "__pycache__" 2>/dev/null | wc -l)
    echo -e "  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–π __pycache__: ${GREEN}${cache_count}${NC}"
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ .pyc —Ñ–∞–π–ª–æ–≤
    pyc_count=$(find . -type f -name "*.pyc" 2>/dev/null | wc -l)
    echo -e "  –§–∞–π–ª–æ–≤ .pyc: ${GREEN}${pyc_count}${NC}"
    
    # –õ–æ–≥–∏
    if [ -d "Data/logs" ]; then
        log_count=$(find Data/logs -name "*.log" 2>/dev/null | wc -l)
        echo -e "  –õ–æ–≥-—Ñ–∞–π–ª–æ–≤: ${GREEN}${log_count}${NC}"
    fi
    
    echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
}

# ==========================================
# Main Logic
# ==========================================

print_header

MODE="${1:-help}"

case "$MODE" in
    cache)
        clean_python_cache
        clean_temp_files
        show_stats
        ;;
    
    logs)
        clean_logs
        ;;
    
    pids)
        clean_pids
        ;;
    
    data)
        clean_logs
        clean_pids
        clean_uploads
        echo -e "${GREEN}‚ú® –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã${NC}"
        ;;
    
    all)
        clean_python_cache
        clean_temp_files
        clean_logs
        clean_pids
        clean_uploads
        echo ""
        echo -e "${GREEN}‚ú® –ü—Ä–æ–µ–∫—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω${NC}"
        show_stats
        ;;
    
    deep)
        echo -e "${RED}‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ì–ª—É–±–æ–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è!${NC}"
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            clean_python_cache
            clean_temp_files
            clean_logs
            clean_pids
            clean_uploads
            clean_database
            clean_backups
            rebuild_venv
            echo ""
            echo -e "${GREEN}‚ú® –ì–ª—É–±–æ–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞${NC}"
            show_stats
        else
            echo -e "${YELLOW}‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ${NC}"
        fi
        ;;
    
    stats)
        show_stats
        ;;
    
    help|--help|-h|*)
        show_usage
        exit 0
        ;;
esac

echo ""
echo -e "${GREEN}üéâ –ì–æ—Ç–æ–≤–æ!${NC}"

