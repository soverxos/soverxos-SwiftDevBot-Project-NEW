import os, asyncio, sys
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ Systems
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "../../..")))
from Systems.core.logging.logger import logger
from Systems.core.database.engine import get_async_session
from Systems.core.database.models import User

load_dotenv()

SUPERADMIN_ID = int(os.getenv("SDB_SUPERADMIN_ID","0"))
ADMIN_IDS = [int(i) for i in os.getenv("SDB_ADMIN_IDS","").split(",") if i.strip()]

def is_admin(uid: int) -> bool:
    return uid == SUPERADMIN_ID or uid in ADMIN_IDS


async def save_or_update_user(telegram_user: types.User) -> User:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –ë–î"""
    from datetime import datetime

    async with get_async_session() as session:
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
        from sqlalchemy import select
        stmt = select(User).where(User.telegram_id == telegram_user.id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()

        current_time = datetime.now()

        if user:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.username = telegram_user.username
            user.first_name = telegram_user.first_name
            user.last_name = telegram_user.last_name
            user.language_code = telegram_user.language_code
            user.last_activity = current_time
            user.is_superadmin = (telegram_user.id == SUPERADMIN_ID)
            user.is_admin = is_admin(telegram_user.id)
            logger.debug(f"Updated user {telegram_user.id} in database")
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                telegram_id=telegram_user.id,
                username=telegram_user.username,
                first_name=telegram_user.first_name,
                last_name=telegram_user.last_name,
                language_code=telegram_user.language_code,
                last_activity=current_time,
                is_superadmin=(telegram_user.id == SUPERADMIN_ID),
                is_admin=is_admin(telegram_user.id)
            )
            session.add(user)
            logger.info(f"Created new user {telegram_user.id} ({telegram_user.username}) in database")

        await session.commit()
        await session.refresh(user)
        return user

async def run():
    token = os.getenv("BOT_TOKEN")
    if not token:
        logger.error("‚ùå BOT_TOKEN not set in environment (.env)")
        return
    
    logger.info("üöÄ Initializing bot_service...")
    bot = Bot(token=token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()

    @dp.message(Command("start"))
    async def cmd_start(m: types.Message):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = await save_or_update_user(m.from_user)

        logger.info(f"User {m.from_user.id} ({m.from_user.username}) sent /start")
        await m.answer("–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî SwiftDevBot üß† (skeleton)")

    @dp.message(Command("admin"))
    async def cmd_admin(m: types.Message):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = await save_or_update_user(m.from_user)

        if not is_admin(m.from_user.id):
            logger.warning(f"User {m.from_user.id} attempted /admin without permissions")
            await m.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
        logger.info(f"Admin {m.from_user.id} accessed /admin")
        await m.answer("‚úÖ –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –ö–æ–º–∞–Ω–¥—ã: /admin, /ping")

    @dp.message(Command("ping"))
    async def cmd_ping(m: types.Message):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = await save_or_update_user(m.from_user)

        logger.debug(f"User {m.from_user.id} sent /ping")
        await m.answer("pong")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    @dp.message()
    async def handle_all_messages(m: types.Message):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –≤—Å–µ—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
        user = await save_or_update_user(m.from_user)

    logger.info("‚úÖ bot_service started, polling Telegram...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(run())
