import os, asyncio, sys
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ Systems
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "../../..")))
from Systems.core.logging.logger import logger
from Systems.core.database.engine import get_async_session
from Systems.core.database.models import User
from Systems.core.config.settings import REQUIRE_REGISTRATION, START_MESSAGE_NEW_USER, START_MESSAGE_EXISTING_USER

load_dotenv()

SUPERADMIN_ID = int(os.getenv("SDB_SUPERADMIN_ID","0"))
ADMIN_IDS = [int(i) for i in os.getenv("SDB_ADMIN_IDS","").split(",") if i.strip()]

def is_admin(uid: int) -> bool:
    return uid == SUPERADMIN_ID or uid in ADMIN_IDS


async def is_user_registered(telegram_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î"""
    # –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —Å—á–∏—Ç–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
    if not REQUIRE_REGISTRATION:
        return True

    from Systems.core.database.engine import get_async_session
    from Systems.core.database.models import User
    from sqlalchemy import select

    try:
        async with get_async_session() as session:
            stmt = select(User).where(User.telegram_id == telegram_id)
            result = await session.execute(stmt)
            user = result.scalar_one_or_none()
            return user is not None
    except Exception as e:
        logger.error(f"Error checking user registration: {e}")
        return False


async def save_or_update_user(telegram_user: types.User) -> User:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –ë–î"""
    from datetime import datetime

    async with get_async_session() as session:
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
        from sqlalchemy import select
        stmt = select(User).where(User.telegram_id == telegram_user.id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()

        current_time = datetime.now()

        if user:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.username = telegram_user.username
            user.first_name = telegram_user.first_name
            user.last_name = telegram_user.last_name
            user.language_code = telegram_user.language_code
            user.last_activity = current_time
            user.is_superadmin = (telegram_user.id == SUPERADMIN_ID)
            user.is_admin = is_admin(telegram_user.id)
            logger.debug(f"Updated user {telegram_user.id} in database")
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                telegram_id=telegram_user.id,
                username=telegram_user.username,
                first_name=telegram_user.first_name,
                last_name=telegram_user.last_name,
                language_code=telegram_user.language_code,
                last_activity=current_time,
                is_superadmin=(telegram_user.id == SUPERADMIN_ID),
                is_admin=is_admin(telegram_user.id)
            )
            session.add(user)
            logger.info(f"Created new user {telegram_user.id} ({telegram_user.username}) in database")

        await session.commit()
        await session.refresh(user)
        return user

async def run():
    token = os.getenv("BOT_TOKEN")
    if not token:
        logger.error("‚ùå BOT_TOKEN not set in environment (.env)")
        return
    
    logger.info("üöÄ Initializing bot_service...")
    bot = Bot(token=token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()

    @dp.message(Command("start"))
    async def cmd_start(m: types.Message):
        # –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        if not REQUIRE_REGISTRATION:
            logger.info(f"User {m.from_user.id} ({m.from_user.username}) sent /start (registration disabled)")
            await m.answer(START_MESSAGE_EXISTING_USER)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if await is_user_registered(m.from_user.id):
            logger.info(f"Already registered user {m.from_user.id} ({m.from_user.username}) sent /start again")
            await m.answer(START_MESSAGE_EXISTING_USER)
            return

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await save_or_update_user(m.from_user)

        logger.info(f"User {m.from_user.id} ({m.from_user.username}) registered via /start")
        await m.answer(START_MESSAGE_NEW_USER)

    @dp.message(Command("admin"))
    async def cmd_admin(m: types.Message):
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤—Å–µ–≥–¥–∞ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if not is_admin(m.from_user.id):
            # –î–ª—è –Ω–µ-–∞–¥–º–∏–Ω–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –≤–∫–ª—é—á–µ–Ω–∞
            if REQUIRE_REGISTRATION and not await is_user_registered(m.from_user.id):
                logger.warning(f"Unregistered user {m.from_user.id} ({m.from_user.username}) attempted /admin")
                await m.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start")
                return
            else:
                logger.warning(f"Non-admin user {m.from_user.id} attempted /admin without permissions")
                await m.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
                return

        logger.info(f"Admin {m.from_user.id} accessed /admin")
        await m.answer("‚úÖ –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –ö–æ–º–∞–Ω–¥—ã: /admin, /ping, /settings")

    @dp.message(Command("ping"))
    async def cmd_ping(m: types.Message):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not await is_user_registered(m.from_user.id):
            logger.warning(f"Unregistered user {m.from_user.id} ({m.from_user.username}) attempted /ping")
            await m.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

        logger.debug(f"User {m.from_user.id} sent /ping")
        await m.answer("pong")

    @dp.message(Command("help"))
    async def cmd_help(m: types.Message):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not await is_user_registered(m.from_user.id):
            logger.warning(f"Unregistered user {m.from_user.id} ({m.from_user.username}) attempted /help")
            await m.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

        logger.debug(f"User {m.from_user.id} requested help")

        if REQUIRE_REGISTRATION:
            help_text = ("ü§ñ SwiftDevBot - —Å–ø—Ä–∞–≤–∫–∞\n\n"
                        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                        "/start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/—Å—Ç–∞—Ç—É—Å\n"
                        "/admin - –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)\n"
                        "/ping - –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞\n"
                        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
                        "üí° –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")
        else:
            help_text = ("ü§ñ SwiftDevBot - —Å–ø—Ä–∞–≤–∫–∞\n\n"
                        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                        "/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
                        "/admin - –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)\n"
                        "/ping - –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞\n"
                        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
                        "üí° –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–∫–ª—é—á–µ–Ω–∞!")

        await m.answer(help_text)

    @dp.message(Command("settings"))
    async def cmd_settings(m: types.Message):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∞–¥–º–∏–Ω—ã –≤—Å–µ–≥–¥–∞ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø)
        if not is_admin(m.from_user.id):
            logger.warning(f"Non-admin user {m.from_user.id} attempted /settings without permissions")
            await m.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
            return

        logger.info(f"Admin {m.from_user.id} accessed /settings")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        settings_text = ("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SwiftDevBot\n\n"
                        f"üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {'‚úÖ –í–ö–õ–Æ–ß–ï–ù–ê' if REQUIRE_REGISTRATION else '‚ùå –û–¢–ö–õ–Æ–ß–ï–ù–ê'}\n\n"
                        "üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤:\n"
                        "/settings on - –≤–∫–ª—é—á–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
                        "/settings off - –æ—Ç–∫–ª—é—á–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n\n"
                        "‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞!")

        await m.answer(settings_text)

    @dp.message(lambda m: m.text and m.text.startswith("/settings "))
    async def cmd_settings_action(m: types.Message):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∞–¥–º–∏–Ω—ã –≤—Å–µ–≥–¥–∞ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø)
        if not is_admin(m.from_user.id):
            logger.warning(f"Non-admin user {m.from_user.id} attempted /settings action without permissions")
            await m.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
            return

        # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        parts = m.text.split()
        if len(parts) != 2:
            await m.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /settings on –∏–ª–∏ /settings off")
            return

        action = parts[1].lower()
        if action not in ["on", "off"]:
            await m.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /settings on –∏–ª–∏ /settings off")
            return

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
        if action == "on":
            await m.answer("‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –í–ö–õ–Æ–ß–ï–ù–ê –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞!\n\n"
                          "üîÑ –í—ã–ø–æ–ª–Ω–∏—Ç–µ: bash run_dev.sh stop && bash run_dev.sh start")
        else:
            await m.answer("‚ùå –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –û–¢–ö–õ–Æ–ß–ï–ù–ê –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞!\n\n"
                          "üîÑ –í—ã–ø–æ–ª–Ω–∏—Ç–µ: bash run_dev.sh stop && bash run_dev.sh start")

        logger.info(f"Admin {m.from_user.id} set registration to {action}")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    @dp.message()
    async def handle_all_messages(m: types.Message):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞
        if REQUIRE_REGISTRATION and not await is_user_registered(m.from_user.id):
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            logger.debug(f"Ignoring message from unregistered user {m.from_user.id} ({m.from_user.username})")
            return

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞) - –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.debug(f"User {m.from_user.id} sent message: {m.text[:50]}...")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞
        if REQUIRE_REGISTRATION:
            user = await save_or_update_user(m.from_user)

    logger.info("‚úÖ bot_service started, polling Telegram...")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ polling
    try:
        await dp.start_polling(bot)
    except Exception as e:
        if "Conflict" in str(e) or "terminated by other getUpdates" in str(e):
            logger.warning("‚ö†Ô∏è  –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å –¥—Ä—É–≥–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –±–æ—Ç–∞. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ updates...")
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ updates –¥–ª—è —Å–±—Ä–æ—Å–∞ offset
                updates = await bot.get_updates(offset=-1, limit=1)
                if updates:
                    last_update_id = updates[-1].update_id
                    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω offset: {last_update_id}")
                    await dp.start_polling(bot, allowed_updates=[], drop_pending_updates=True)
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å updates –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞")
            except Exception as e2:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞: {e2}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ polling: {e}")
            raise

if __name__ == "__main__":
    asyncio.run(run())
