"""
SwiftDevBot Configuration Settings
----------------------------------
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º
"""

import os
from typing import List, Optional
from pathlib import Path

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    # dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ
    pass


# –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
def _parse_int(value: str, default: int, min_val: Optional[int] = None, max_val: Optional[int] = None) -> int:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–∏–∞–ø–∞–∑–æ–Ω–∞"""
    try:
        result = int(value)
        if min_val is not None and result < min_val:
            raise ValueError(f"Value {result} is less than minimum {min_val}")
        if max_val is not None and result > max_val:
            raise ValueError(f"Value {result} is greater than maximum {max_val}")
        return result
    except (ValueError, TypeError) as e:
        raise ValueError(f"Invalid integer value '{value}': {e}")


def _parse_list_of_ints(value: str, default: List[int] = None) -> List[int]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª"""
    if default is None:
        default = []

    if not value.strip():
        return default

    try:
        return [int(x.strip()) for x in value.split(",") if x.strip()]
    except (ValueError, TypeError) as e:
        raise ValueError(f"Invalid integer list value '{value}': {e}")


def _validate_choice(value: str, choices: List[str], default: str) -> str:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
    if value not in choices:
        raise ValueError(f"Invalid choice '{value}'. Must be one of: {choices}")
    return value


# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
SDB_ENV = _validate_choice(
    os.getenv("SDB_ENV", "dev"),
    ["dev", "staging", "prod"],
    "dev"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_ENGINE = _validate_choice(
    os.getenv("DB_ENGINE", "sqlite"),
    ["sqlite", "postgres", "mysql"],
    "sqlite"
)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ DSN –¥–ª—è –≤—Å–µ—Ö –ë–î
POSTGRES_DSN = os.getenv("POSTGRES_DSN")
MYSQL_DSN = os.getenv("MYSQL_DSN")
SQLITE_PATH = os.getenv("SQLITE_PATH", "Data/database/sdb.sqlite3")

if DB_ENGINE == "sqlite":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π
    sqlite_path = Path(SQLITE_PATH)
    if sqlite_path.is_absolute() and not str(sqlite_path).startswith("/tmp/"):
        raise ValueError("SQLite path must be relative or in /tmp/ for security")
    DATABASE_URL = f"sqlite:///{SQLITE_PATH}"
elif DB_ENGINE == "postgres":
    DATABASE_URL = POSTGRES_DSN
    if not DATABASE_URL:
        raise ValueError("POSTGRES_DSN is required when DB_ENGINE=postgres")
elif DB_ENGINE == "mysql":
    DATABASE_URL = MYSQL_DSN
    if not DATABASE_URL:
        raise ValueError("MYSQL_DSN is required when DB_ENGINE=mysql")

# –°–æ–∑–¥–∞–µ–º async –≤–µ—Ä—Å–∏—é URL –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ async –¥–≤–∏–∂–∫–µ
if DB_ENGINE == "sqlite":
    ASYNC_DATABASE_URL = DATABASE_URL.replace("sqlite:///", "sqlite+aiosqlite:///")
elif DB_ENGINE == "postgres":
    # –£–±–∏—Ä–∞–µ–º sync –¥—Ä–∞–π–≤–µ—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ–º async
    ASYNC_DATABASE_URL = DATABASE_URL.replace("+psycopg2", "").replace("postgresql://", "postgresql+asyncpg://")
elif DB_ENGINE == "mysql":
    # –£–±–∏—Ä–∞–µ–º sync –¥—Ä–∞–π–≤–µ—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ–º async
    ASYNC_DATABASE_URL = DATABASE_URL.replace("+pymysql", "").replace("mysql://", "mysql+aiomysql://")
else:
    ASYNC_DATABASE_URL = DATABASE_URL

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ EventBus
EVENTBUS_MODE = _validate_choice(
    os.getenv("EVENTBUS_MODE", "memory" if SDB_ENV == "dev" else "redis"),
    ["memory", "redis"],
    "memory" if SDB_ENV == "dev" else "redis"
)

REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379/0")
EVENTBUS_MEMORY_MAX = _parse_int(
    os.getenv("EVENTBUS_MEMORY_MAX", "1000"),
    1000, 10, 100000  # min 10, max 100k
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
SDB_SUPERADMIN_ID = _parse_int(
    os.getenv("SDB_SUPERADMIN_ID", "0"),
    0, 0, 999999999999  # Telegram ID limits
)

SDB_ADMIN_IDS = _parse_list_of_ints(
    os.getenv("SDB_ADMIN_IDS", ""),
    []
)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ superadmin –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è –≤ admin_ids
if SDB_SUPERADMIN_ID > 0 and SDB_SUPERADMIN_ID in SDB_ADMIN_IDS:
    raise ValueError("SDB_SUPERADMIN_ID should not be in SDB_ADMIN_IDS")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_LEVEL = _validate_choice(
    os.getenv("LOG_LEVEL", "INFO"),
    ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
    "INFO"
)

LOG_FORMAT = _validate_choice(
    os.getenv("LOG_FORMAT", "json" if SDB_ENV == "prod" else "text"),
    ["text", "json"],
    "json" if SDB_ENV == "prod" else "text"
)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
SECRET_KEY = os.getenv("SECRET_KEY", "dev-secret-change-in-prod")
if SDB_ENV != "dev" and SECRET_KEY == "dev-secret-change-in-prod":
    raise ValueError("SECRET_KEY must be set in production")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
MAX_WORKERS = _parse_int(
    os.getenv("MAX_WORKERS", "4"),
    4, 1, 100
)

REQUEST_TIMEOUT = _parse_int(
    os.getenv("REQUEST_TIMEOUT", "30"),
    30, 5, 300
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram Bot
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN and SDB_ENV != "dev":
    raise ValueError("BOT_TOKEN is required in production")

# Webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/webhook")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
REQUIRE_REGISTRATION = os.getenv("REQUIRE_REGISTRATION", "true").lower() == "true"
START_MESSAGE_NEW_USER = os.getenv("START_MESSAGE_NEW_USER",
    "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SwiftDevBot!\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/admin - –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n/ping - –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞\n/help - —Å–ø—Ä–∞–≤–∫–∞")
START_MESSAGE_EXISTING_USER = os.getenv("START_MESSAGE_EXISTING_USER",
    "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/admin - –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n/ping - –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞\n/help - —Å–ø—Ä–∞–≤–∫–∞")

# –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
__all__ = [
    "SDB_ENV", "DB_ENGINE", "DATABASE_URL", "ASYNC_DATABASE_URL", "EVENTBUS_MODE", "REDIS_URL",
    "EVENTBUS_MEMORY_MAX", "SDB_SUPERADMIN_ID", "SDB_ADMIN_IDS",
    "LOG_LEVEL", "LOG_FORMAT", "SECRET_KEY", "MAX_WORKERS", "REQUEST_TIMEOUT",
    "BOT_TOKEN", "WEBHOOK_URL", "WEBHOOK_PATH", "POSTGRES_DSN", "MYSQL_DSN", "SQLITE_PATH",
    "REQUIRE_REGISTRATION", "START_MESSAGE_NEW_USER", "START_MESSAGE_EXISTING_USER"
]
