"""
Universal EventBus for SwiftDevBot
----------------------------------
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —à–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π pub/sub, RPC –∏ —Ä–∞–∑–Ω—ã—Ö –±—Ä–æ–∫–µ—Ä–æ–≤
"""

import asyncio
import json
import uuid
import time
from typing import Dict, Any, Callable, Optional, List, Union, Awaitable
from dataclasses import dataclass, asdict
from abc import ABC, abstractmethod

from Systems.core.logging.logger import get_logger
from Systems.core.config.settings import EVENTBUS_MODE, REDIS_URL, SDB_ENV

logger = get_logger("eventbus", "system", "eventbus")


@dataclass
class Message:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ EventBus"""
    id: str
    topic: str
    payload: Dict[str, Any]
    timestamp: float
    source: str = "unknown"
    correlation_id: Optional[str] = None
    reply_to: Optional[str] = None
    headers: Optional[Dict[str, Any]] = None

    def __post_init__(self):
        if self.headers is None:
            self.headers = {}

    def to_dict(self) -> Dict[str, Any]:
        return asdict(self)

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'Message':
        return cls(**data)

    def to_json(self) -> str:
        return json.dumps(self.to_dict(), ensure_ascii=False)

    @classmethod
    def from_json(cls, json_str: str) -> 'Message':
        return cls.from_dict(json.loads(json_str))


@dataclass
class RPCRequest:
    """RPC –∑–∞–ø—Ä–æ—Å"""
    id: str
    method: str
    params: Dict[str, Any]
    timeout: float = 30.0
    correlation_id: Optional[str] = None

    def to_message(self, source: str) -> Message:
        return Message(
            id=self.id,
            topic=f"rpc.{self.method}",
            payload=self.params,
            timestamp=time.time(),
            source=source,
            correlation_id=self.correlation_id,
            headers={"rpc": True, "timeout": self.timeout}
        )


@dataclass
class RPCResponse:
    """RPC –æ—Ç–≤–µ—Ç"""
    id: str
    result: Optional[Any] = None
    error: Optional[str] = None
    correlation_id: str = ""

    def to_message(self, source: str) -> Message:
        return Message(
            id=self.id,
            topic="rpc.response",
            payload={"result": self.result, "error": self.error},
            timestamp=time.time(),
            source=source,
            correlation_id=self.correlation_id,
            headers={"rpc_response": True}
        )


class BrokerBackend(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±—ç–∫–µ–Ω–¥ –¥–ª—è –±—Ä–æ–∫–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""

    @abstractmethod
    async def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±—Ä–æ–∫–µ—Ä—É"""
        pass

    @abstractmethod
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç –±—Ä–æ–∫–µ—Ä–∞"""
        pass

    @abstractmethod
    async def publish(self, message: Message):
        """–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        pass

    @abstractmethod
    async def subscribe(self, topic: str, handler: Callable[[Message], Awaitable[None]]):
        """–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–æ–ø–∏–∫"""
        pass

    @abstractmethod
    async def unsubscribe(self, topic: str):
        """–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ç–æ–ø–∏–∫–∞"""
        pass


class MemoryBroker(BrokerBackend):
    """In-memory –±—Ä–æ–∫–µ—Ä –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""

    def __init__(self, max_queue_size: int = 10000):
        self.queue = asyncio.Queue(maxsize=max_queue_size)
        self.subscriptions: Dict[str, List[Callable]] = {}
        self.running = False

    async def connect(self) -> bool:
        self.running = True
        asyncio.create_task(self._process_messages())
        logger.info("üß† MemoryBroker: connected")
        return True

    async def disconnect(self):
        self.running = False
        logger.info("üß† MemoryBroker: disconnected")

    async def publish(self, message: Message):
        await self.queue.put(message)

    async def subscribe(self, topic: str, handler: Callable[[Message], Awaitable[None]]):
        if topic not in self.subscriptions:
            self.subscriptions[topic] = []
        self.subscriptions[topic].append(handler)
        logger.debug(f"üß† MemoryBroker: subscribed to {topic}")

    async def unsubscribe(self, topic: str):
        if topic in self.subscriptions:
            del self.subscriptions[topic]
            logger.debug(f"üß† MemoryBroker: unsubscribed from {topic}")

    async def _process_messages(self):
        while self.running:
            try:
                message = await asyncio.wait_for(self.queue.get(), timeout=1.0)

                # –†–∞—Å—Å—ã–ª–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
                for topic, handlers in self.subscriptions.items():
                    if self._topic_matches(message.topic, topic):
                        for handler in handlers:
                            try:
                                await handler(message)
                            except Exception as e:
                                logger.error(f"üß† MemoryBroker: handler error: {e}")

            except asyncio.TimeoutError:
                continue
            except Exception as e:
                logger.error(f"üß† MemoryBroker: processing error: {e}")

    def _topic_matches(self, message_topic: str, subscription_topic: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ç–æ–ø–∏–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π wildcards"""
        if subscription_topic == "*":
            return True
        if subscription_topic.endswith(".*"):
            return message_topic.startswith(subscription_topic[:-1])
        return message_topic == subscription_topic


class RedisBroker(BrokerBackend):
    """Redis –±—Ä–æ–∫–µ—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"""

    def __init__(self, redis_url: str):
        self.redis_url = redis_url
        self.redis = None
        self.pubsub = None
        self.subscriptions: Dict[str, Callable] = {}

    async def connect(self) -> bool:
        try:
            import redis.asyncio as aioredis

            self.redis = aioredis.from_url(self.redis_url)
            await self.redis.ping()

            self.pubsub = self.redis.pubsub()
            logger.info(f"üîå RedisBroker: connected to {self.redis_url}")
            return True

        except ImportError:
            logger.error("üîå RedisBroker: redis library not installed")
            return False
        except Exception as e:
            logger.error(f"üîå RedisBroker: connection failed: {e}")
            return False

    async def disconnect(self):
        if self.pubsub:
            await self.pubsub.unsubscribe()
        if self.redis:
            await self.redis.close()
        logger.info("üîå RedisBroker: disconnected")

    async def publish(self, message: Message):
        if not self.redis:
            return

        try:
            await self.redis.publish(message.topic, message.to_json())
        except Exception as e:
            logger.error(f"üîå RedisBroker: publish error: {e}")

    async def subscribe(self, topic: str, handler: Callable[[Message], Awaitable[None]]):
        if not self.pubsub:
            return

        self.subscriptions[topic] = handler

        try:
            await self.pubsub.subscribe(topic)
            asyncio.create_task(self._redis_listener())
            logger.debug(f"üîå RedisBroker: subscribed to {topic}")
        except Exception as e:
            logger.error(f"üîå RedisBroker: subscribe error: {e}")

    async def unsubscribe(self, topic: str):
        if topic in self.subscriptions:
            del self.subscriptions[topic]
        if self.pubsub:
            await self.pubsub.unsubscribe(topic)
        logger.debug(f"üîå RedisBroker: unsubscribed from {topic}")

    async def _redis_listener(self):
        if not self.pubsub:
            return

        try:
            async for redis_message in self.pubsub.listen():
                if redis_message.get("type") == "message":
                    try:
                        message = Message.from_json(redis_message.get("data", "{}"))

                        # –†–∞—Å—Å—ã–ª–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
                        for topic, handler in self.subscriptions.items():
                            if self._topic_matches(message.topic, topic):
                                await handler(message)

                    except Exception as e:
                        logger.error(f"üîå RedisBroker: message processing error: {e}")

        except Exception as e:
            logger.error(f"üîå RedisBroker: listener error: {e}")

    def _topic_matches(self, message_topic: str, subscription_topic: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ç–æ–ø–∏–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π wildcards"""
        # Redis pubsub –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç wildcards, –Ω–æ –º—ã –º–æ–∂–µ–º —ç–º—É–ª–∏—Ä–æ–≤–∞—Ç—å
        if subscription_topic == "*":
            return True
        if subscription_topic.endswith(".*"):
            return message_topic.startswith(subscription_topic[:-1])
        return message_topic == subscription_topic


class EventBus:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —à–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–π SwiftDevBot"""

    def __init__(self, broker: Optional[BrokerBackend] = None):
        self.broker = broker
        self.rpc_handlers: Dict[str, Callable] = {}
        self.pending_requests: Dict[str, asyncio.Future] = {}
        self.middlewares: List[Callable[[Message], Awaitable[Message]]] = []
        self.connected = False

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EventBus"""
        if not self.broker:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –±—Ä–æ–∫–µ—Ä–∞
            if EVENTBUS_MODE == "redis":
                self.broker = RedisBroker(REDIS_URL)
            else:
                from Systems.core.config.settings import EVENTBUS_MEMORY_MAX
                self.broker = MemoryBroker(EVENTBUS_MEMORY_MAX)

        self.connected = await self.broker.connect()

        if self.connected:
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ RPC –æ—Ç–≤–µ—Ç—ã
            await self.subscribe("rpc.response", self._handle_rpc_response)
            logger.info(f"üöÄ EventBus initialized with {self.broker.__class__.__name__}")
        else:
            logger.error("‚ùå EventBus initialization failed")

    async def shutdown(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã EventBus"""
        if self.broker:
            await self.broker.disconnect()
        self.connected = False

        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ RPC –∑–∞–ø—Ä–æ—Å—ã
        for future in self.pending_requests.values():
            if not future.done():
                future.cancel()

        logger.info("üõë EventBus shutdown")

    # === Pub/Sub API ===

    async def publish(self, topic: str, payload: Dict[str, Any], **kwargs):
        """–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if not self.connected:
            logger.warning("‚ö†Ô∏è EventBus: not connected, message dropped")
            return

        message = Message(
            id=str(uuid.uuid4()),
            topic=topic,
            payload=payload,
            timestamp=time.time(),
            **kwargs
        )

        # –ü—Ä–∏–º–µ–Ω—è–µ–º middleware
        for middleware in self.middlewares:
            message = await middleware(message)

        await self.broker.publish(message)
        logger.debug(f"üì§ Published: {topic}")

    async def subscribe(self, topic: str, handler: Callable[[Message], Awaitable[None]]):
        """–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–æ–ø–∏–∫"""
        if not self.connected:
            logger.warning("‚ö†Ô∏è EventBus: not connected, subscription failed")
            return

        async def wrapped_handler(message: Message):
            try:
                await handler(message)
            except Exception as e:
                logger.error(f"‚ùå Handler error for topic {topic}: {e}")

        await self.broker.subscribe(topic, wrapped_handler)
        logger.debug(f"üì• Subscribed: {topic}")

    async def unsubscribe(self, topic: str):
        """–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ç–æ–ø–∏–∫–∞"""
        if self.broker:
            await self.broker.unsubscribe(topic)

    # === RPC API ===

    async def register_rpc_handler(self, method: str, handler: Callable[[Dict[str, Any]], Awaitable[Any]]):
        """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å RPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
        self.rpc_handlers[method] = handler

        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ RPC –≤—ã–∑–æ–≤—ã –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞
        await self.subscribe(f"rpc.{method}", self._handle_rpc_call)
        logger.info(f"üîß RPC handler registered: {method}")

    async def call_rpc(self, method: str, params: Dict[str, Any] = None, timeout: float = 30.0) -> Any:
        """–í—ã–∑–≤–∞—Ç—å RPC –º–µ—Ç–æ–¥"""
        if params is None:
            params = {}

        request = RPCRequest(
            id=str(uuid.uuid4()),
            method=method,
            params=params,
            timeout=timeout
        )

        # –°–æ–∑–¥–∞–µ–º Future –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        future = asyncio.Future()
        self.pending_requests[request.id] = future

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        message = request.to_message("client")
        await self.broker.publish(message)

        try:
            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            response_message = await asyncio.wait_for(future, timeout=timeout)

            if response_message.payload.get("error"):
                raise Exception(response_message.payload["error"])

            return response_message.payload.get("result")

        except asyncio.TimeoutError:
            raise Exception(f"RPC timeout: {method}")
        finally:
            # –û—á–∏—â–∞–µ–º pending request
            self.pending_requests.pop(request.id, None)

    async def _handle_rpc_call(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ RPC –≤—ã–∑–æ–≤–∞"""
        method = message.topic.replace("rpc.", "")

        if method not in self.rpc_handlers:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É
            error_response = RPCResponse(
                id=str(uuid.uuid4()),
                error=f"Method not found: {method}",
                correlation_id=message.correlation_id or message.id
            )
            await self.broker.publish(error_response.to_message("server"))
            return

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º RPC –º–µ—Ç–æ–¥
            handler = self.rpc_handlers[method]
            result = await handler(message.payload)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            success_response = RPCResponse(
                id=str(uuid.uuid4()),
                result=result,
                correlation_id=message.correlation_id or message.id
            )
            await self.broker.publish(success_response.to_message("server"))

        except Exception as e:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É
            error_response = RPCResponse(
                id=str(uuid.uuid4()),
                error=str(e),
                correlation_id=message.correlation_id or message.id
            )
            await self.broker.publish(error_response.to_message("server"))

    async def _handle_rpc_response(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ RPC –æ—Ç–≤–µ—Ç–∞"""
        correlation_id = message.correlation_id
        if correlation_id in self.pending_requests:
            future = self.pending_requests[correlation_id]
            if not future.done():
                future.set_result(message)

    def add_middleware(self, middleware: Callable[[Message], Awaitable[Message]]):
        """–î–æ–±–∞–≤–∏—Ç—å middleware"""
        self.middlewares.append(middleware)

    # === Legacy API (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) ===

    async def connect(self):
        """–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        await self.initialize()

    async def disconnect(self):
        """–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        await self.shutdown()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä EventBus
eventbus = EventBus()
