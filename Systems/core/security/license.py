"""
License Validation System
------------------------
–ë–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π SwiftDevBot
"""

import os
import json
import hashlib
import hmac
import time
from typing import Dict, Any, Optional, Tuple
from datetime import datetime, timedelta

from Systems.core.logging.logger import logger
from Systems.core.config.settings import SDB_ENV
from Systems.core.database.engine import get_async_session
from Systems.core.database.models import Setting


class LicenseValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π"""

    def __init__(self):
        self.license_key: Optional[str] = None
        self.license_data: Optional[Dict[str, Any]] = None
        self.secret_key = os.getenv("LICENSE_SECRET", "default_secret_change_in_prod")
        self._is_valid = False
        self._last_check = 0
        self.check_interval = 3600  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ –∫–∞–∂–¥—ã–π —á–∞—Å

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        logger.info("üîê LicenseValidator: initializing...")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –ë–î
        self.license_key = os.getenv("SDB_LICENSE_KEY")

        if not self.license_key and SDB_ENV != "dev":
            logger.warning("‚ö†Ô∏è LicenseValidator: no license key found in production environment")
            self._is_valid = False
            return

        # –í dev —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –ª–∏—Ü–µ–Ω–∑–∏–∏
        if SDB_ENV == "dev":
            logger.info("üîê LicenseValidator: development mode - license validation disabled")
            self._is_valid = True
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏
        is_valid, license_data = await self.validate_license()
        self._is_valid = is_valid
        self.license_data = license_data

        if self._is_valid:
            logger.info(f"‚úÖ LicenseValidator: license validated successfully for {license_data.get('organization', 'unknown')}")
        else:
            logger.error("‚ùå LicenseValidator: license validation failed")

    def is_valid(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞
        if time.time() - self._last_check > self.check_interval:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫—É
            self._last_check = time.time()

        return self._is_valid

    def get_license_info(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        return self.license_data

    def get_limits(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç—ã –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        if not self.license_data:
            return self._get_default_limits()

        return {
            "max_users": self.license_data.get("max_users", 10),
            "max_modules": self.license_data.get("max_modules", 5),
            "max_bots": self.license_data.get("max_bots", 1),
            "features": self.license_data.get("features", []),
            "expires_at": self.license_data.get("expires_at"),
        }

    def _get_default_limits(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–¥–ª—è dev —Ä–µ–∂–∏–º–∞)"""
        return {
            "max_users": 100,
            "max_modules": 50,
            "max_bots": 10,
            "features": ["all"],
            "expires_at": None,
        }

    async def validate_license(self) -> Tuple[bool, Optional[Dict[str, Any]]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞"""
        if not self.license_key:
            return False, None

        try:
            # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
            license_data = self._decode_license(self.license_key)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
            if not self._verify_signature(license_data):
                logger.error("‚ùå LicenseValidator: invalid license signature")
                return False, None

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
            if not self._check_expiration(license_data):
                logger.error("‚ùå LicenseValidator: license expired")
                return False, None

            return True, license_data

        except Exception as e:
            logger.error(f"‚ùå LicenseValidator: license validation error: {e}")
            return False, None

    def _decode_license(self, license_key: str) -> Dict[str, Any]:
        """–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è: license_key –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64
        import base64
        import json

        try:
            # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥–ø–∏—Å—å
            parts = license_key.split(".")
            if len(parts) != 2:
                raise ValueError("Invalid license format")

            data_b64, signature_b64 = parts

            # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            data_json = base64.b64decode(data_b64).decode('utf-8')
            data = json.loads(data_json)

            # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
            signature = base64.b64decode(signature_b64)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            data['_signature'] = signature

            return data

        except Exception as e:
            raise ValueError(f"Failed to decode license: {e}")

    def _verify_signature(self, license_data: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        try:
            signature = license_data.pop('_signature')

            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
            data_str = json.dumps(license_data, sort_keys=True)
            expected_signature = hmac.new(
                self.secret_key.encode(),
                data_str.encode(),
                hashlib.sha256
            ).digest()

            return hmac.compare_digest(signature, expected_signature)

        except Exception:
            return False

    def _check_expiration(self, license_data: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        expires_at = license_data.get("expires_at")
        if not expires_at:
            return True  # –ë–µ—Å—Å—Ä–æ—á–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è

        try:
            # expires_at –º–æ–∂–µ—Ç –±—ã—Ç—å timestamp –∏–ª–∏ ISO string
            if isinstance(expires_at, str):
                expires_dt = datetime.fromisoformat(expires_at.replace('Z', '+00:00'))
            else:
                expires_dt = datetime.fromtimestamp(expires_at)

            return datetime.now() < expires_dt

        except Exception:
            logger.error("‚ùå LicenseValidator: failed to parse expiration date")
            return False

    async def save_license_to_db(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—Ü–µ–Ω–∑–∏–∏ –≤ –ë–î"""
        if not self.license_data:
            return

        try:
            async with get_async_session() as session:
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏
                setting = Setting(
                    key="license_status",
                    value="valid" if self._is_valid else "invalid",
                    value_type="string",
                    category="license"
                )
                session.add(setting)

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ª–∏—Ü–µ–Ω–∑–∏–∏
                license_setting = Setting(
                    key="license_data",
                    value=json.dumps(self.license_data),
                    value_type="json",
                    category="license"
                )
                session.add(license_setting)

                await session.commit()

        except Exception as e:
            logger.error(f"‚ùå LicenseValidator: failed to save license to DB: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
license_validator = LicenseValidator()
